<html>

<head>
    <script src="https://vigokit.oss-cn-hongkong.aliyuncs.com/vigoplayer/latest/VigoPlayer.min.js"></script>
    <script type="text/javascript" src="/game/baccarat-get-stream"></script>

    <style>
        body,
        html {
            padding: 0;
            margin: 0;
            overflow: hidden;
        }
    </style>
</head>

<body style="margin: 0px;">
    <canvas id="video" style="width: 100%;height: 100%;"></canvas>
    <script>
        let ENV_DEBUG = !true;
        let STREAM_URL = "wss://hollyvnmgtm.vnkuvideo.com:8882//apps/IYJfyYAzFE1Q3fVSvQPUwA/1701639907/fyzbj0122";
        let PLAYER_DEBUG = false;

        if (!ENV_DEBUG) {
            var mydata = JSON.parse(dataJson);
            if (mydata.hasOwnProperty("Error")) {
                console.log(mydata);
            }
        }

        !ENV_DEBUG ? STREAM_URL = mydata.Data.channelSource[Math.floor(Math.random() * (mydata.Data.channelSource.length))].url + mydata.Data.StreamTimestampKey + mydata.Data.channelTable.phone : null;

        var player;

        function initPlayer() {
            VigoPlayer.load(() => {
                player = new VigoPlayer();
                if (/(Android)/i.test(navigator.userAgent)) {
                    VigoPlayer.activeAudioEngine(true);
                }

                player.start(STREAM_URL);

                player.on("start", () => {
                    // 当连接成功并收到数据
                    if (PLAYER_DEBUG) console.log("Player Started!");
                });

                player.on("stop", () => {
                    // 当本地stop或远端断开连接
                    if (PLAYER_DEBUG) console.log("Player Stopped!");
                });

                player.on("error", (e) => {
                    // 当连接错误或播放中发生错误
                    if (PLAYER_DEBUG) console.log("Player Error: " + e);
                });

                player.on("videoInfo", (w, h) => {
                    //当解析出视频信息时回调
                    if (PLAYER_DEBUG) console.log("Player on video info width=" + w + " height=" + h);
                })

                player.on("audioInfo", (r, c) => {
                    //当解析出音频信息时回调
                    if (PLAYER_DEBUG) console.log("Player on audio info samplerate=" + r + " channels=" + c);
                })

                player.on("stats", (stats) => {
                    // 每秒回调一次流统计信息
                    if (PLAYER_DEBUG) console.log("Player on stats=", stats);
                })

                player.on("timeout", () => {
                    if (PLAYER_DEBUG) console.log("Player on timeout");
                    player.stop();
                    player.start(url.value);
                })

                // player.useMSE();  //启用MSE硬解
                /**
                 * 使用worker线程解码, 适用于多画面直播, 能有效利用多核处理器
                 * 紧随 new 后调用
                 */
                // player.useWorker();
                /**
                   * 开启屏幕常亮
                   * 在手机浏览器上,canvas标签渲染视频并不会像video标签那样保持屏幕常亮
                   * 如果需要该功能, 可以调用此方法
                   * H5目前在chrome\edge 84, android chrome 84及以上有原生亮屏API, 需要是https页面
                   * 其余平台为模拟实现，非全兼容。
                   */
                player.setKeepScreenOn();
                /**
                 * 设置最大缓冲时长，单位毫秒，只在软解时有效
                  */
                player.setBufferTime(1000);
                /**
                 * 设置超时时长, 单位秒,只在软解时有效
                 * 在连接成功之前和播放中途,如果超过设定时长无数据返回,则回调timeout事件
                 */
                player.setTimeout(10);
                /**
                 * 传入 canvas视图的id，当使用mse时，自动转换为video标签
                 */
                player.setView("video");
                player.setScaleMode(0);
            });
        }
        function setScaleLevel(value) {
            /**
            缩放等级 0.0-1.0
            1.0 就是原始尺寸
            **/
            player.setScaleLevel(x.value, y.value, 1 - value / 10);
        }

        function startFunc() {
            player.stop();
            /**
             * 设置解密密码,必须是16字节
             */
            player.setCryptoKey(key.value);
            /**
             * 开始播放,参数为 http-flv或 websocket-flv 的url
             */
            player.start(url.value);
        }

        function stopFunc() {
            /**
             * 停止播放
             */
            player.stop();
            //按需清理画布为黑色背景
            // player.clearView();
        }

        function fullFunc() {
            player.fullscreen();
        }

        function AudioSound(status) {
            setTimeout(() => {
                (status) ? volumeChange(100) : volumeChange(0)
            }, 100);
        }

        function volumeChange(value) {
            /**
             * 设置音量
             * 0.0  ~~ 1.0
             * 当为0.0时,完全静音, 最大1.0
             */
            player.setVolume(value / 100.0);
        }

        function bufferChange(value) {
            player.setBufferTime(value);
        }


        function scaleModeChange(value) {
            /**
             * 视频缩放模式, 当视频分辨率比例与Canvas显示区域比例不同时,缩放效果不同:
             *  0 视频画面完全填充canvas区域,画面会被拉伸 --- 默认值
             *  1 视频画面做等比缩放后,对齐Canvas区域,画面不被拉伸,但有黑边
             *  2 视频画面做等比缩放后,完全填充Canvas区域,画面不被拉伸,没有黑边,但画面显示不全
             * 软解时有效
             */
            player.setScaleMode(value);
        }

        function screenshot() {
            // player.screenshot("screenshot.png", "png");
            player.screenshot("screenshot.jpeg", "jpeg", 0.8);
        }

        function getQueryVariable(variable) {
            var query = window.location.search.substring(1);
            var vars = query.split("&");
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split("=");
                if (pair[0] == variable) { return pair[1]; }
            }
            return (false);
        }

        initPlayer();
    </script>
</body>

</html>